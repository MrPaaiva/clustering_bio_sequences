/*
	This file use koolplot library for to plot
	the graphic generated by Elbow method.

	Installation of the koolplot library:
		http://koolplot.codecutter.org/

	Libs for the compilation process:
		lkoolplot, lbgi, lgdi32, lcomdlg32, luuid, loleaut32, lole32

	Elbow method is a heuristic to discover the number of clusters.
	This may or may not work well in particular case because is a heuristic!

	References for the Elbow method:
		https://www.quora.com/How-can-we-choose-a-good-K-for-K-means-clustering
		https://gist.github.com/rpgove/0060ff3b656618e9136b
		https://en.wikipedia.org/wiki/Determining_the_number_of_clusters_in_a_data_set#The_Elbow_Method

	Example of the use of the koolplot:

		const char * header = "Elbow Method";
		char winTitle[120];

		vector<double> v_x, v_y;

		v_x.push_back(2);
		v_x.push_back(3);
		v_x.push_back(4);
		v_x.push_back(5);
		v_x.push_back(6);

		v_y.push_back(0.4);
		v_y.push_back(0.6);
		v_y.push_back(0.8);
		v_y.push_back(0.82);
		v_y.push_back(0.83);

		Plotdata x(v_x), y(v_y);

		sprintf(winTitle, "%s", header);
		plot(x, y, winTitle);
*/

#include <iostream>
#include <stdlib.h>
#include <time.h>
#include <koolplot.h>
#include "kmeans.h"
#include "fasta_file.h"

using namespace std;

int main()
{
	clock_t begin = clock();

	srand(time(NULL));

	std::string dataset_name("splice.data.600.sequences.fasta");
	FastaFile ff(dataset_name);
	std::vector<std::pair<std::string, std::string> > dataset;

	dataset = ff.getSequences();

	std::vector<std::pair<std::string, std::string> >::iterator it;
	std::vector<std::string> sequences;

	for(it = dataset.begin(); it != dataset.end(); it++)
		sequences.push_back((*it).second);

	/*
		Parameters in order:
			1) number of clusters
			2) total points
			3) total attributes
			4) max iterations
			5) sequences
			6) method for convert to a data point
			7) uses kmeans++ ?
			8) uses hybrid (mean function + harmonic mean) ?
			9) show results ?
	*/
	KMeans kmeans(3, sequences.size(), sequences.size(),
				  100, sequences, "HAMMING", true, false, false);
	kmeans.run();

	clock_t end = clock();
	double elapsed_secs = double(end - begin) / CLOCKS_PER_SEC;

	std::cout << "\nTime: " << elapsed_secs << " seconds.\n";

	return 0;
}
